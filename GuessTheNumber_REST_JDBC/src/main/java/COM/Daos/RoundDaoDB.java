package COM.Daos;
import COM.Entities.Round;
import java.sql.*;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;

@Repository //CRUD
//@Profile("RoundDatabase")
public class RoundDaoDB implements RoundDao{

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public RoundDaoDB(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Round addRound(Round round) {
        //roundID auto-key, isFinished default = false
        final String sql = "INSERT INTO round(gameID, guess, result) VALUES (?, ?, ?);";
        //holds auto-generated key
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update((Connection conn) -> {
            //RETURN_GENERATED obtains generated key for new Game
            PreparedStatement statement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setInt(1, round.getGameID());
            statement.setString(2, round.getGuess());
            statement.setString(3, round.getResult());
            return statement;}, keyHolder);
        //KeyHolder.getKey() returns key generated by SQL for game object
        round.setRoundID(keyHolder.getKey().intValue());
        return round;
    }

    @Override
    public List<Round> getAllRounds(int gameID) {
        final String sql = "SELECT * FROM round WHERE gameID = ? ORDER BY guessTime;";
        return jdbcTemplate.query(sql, new RoundDaoDB.RoundMapper(), gameID);
    }

    @Override
    public Round findByID(int roundID) {
        final String sql = "SELECT * FROM round WHERE roundID = ?;";
        return jdbcTemplate.queryForObject(sql, new RoundDaoDB.RoundMapper(), roundID);
    }

    @Override
    public boolean updateRound(Round round) {
        final String sql = "UPDATE round SET guess + ?, result = ?;";
        //will return TRUE if an update occurred as 1+
        return jdbcTemplate.update(sql, round.getGuess(), round.getResult()) > 0;
    }

    @Override
    public boolean deleteRound(int roundID) {
        final String sql = "DELETE FROM round WHERE roundID = ?;";
        return jdbcTemplate.update(sql, roundID) > 0;
    }

    private static final class RoundMapper implements RowMapper<Round>{
        @Override
        public Round mapRow(ResultSet rs, int index) throws SQLException {
            Round round = new Round();
            round.setRoundID(rs.getInt("roundID"));
            round.setGameID(rs.getInt("gameID"));
            Timestamp timestamp = rs.getTimestamp("guessTime");
            round.setTime(timestamp.toLocalDateTime());
            round.setGuess(rs.getString("guess"));
            round.setResult(rs.getString("result"));
            return round;
        }
    }
}
